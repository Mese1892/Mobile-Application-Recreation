{
  "_args": [
    [
      {
        "raw": "react-native-svg-charts",
        "scope": null,
        "escapedName": "react-native-svg-charts",
        "name": "react-native-svg-charts",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\facultate\\FUCKINGREACT\\Mobile-Application-Recreation\\PowerProject"
    ]
  ],
  "_from": "react-native-svg-charts@latest",
  "_id": "react-native-svg-charts@1.6.1",
  "_inCache": true,
  "_location": "/react-native-svg-charts",
  "_nodeVersion": "8.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-svg-charts-1.6.1.tgz_1512407957136_0.5619660944212228"
  },
  "_npmUser": {
    "name": "lekland",
    "email": "jesper.lekland@gmail.com"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-svg-charts",
    "scope": null,
    "escapedName": "react-native-svg-charts",
    "name": "react-native-svg-charts",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-svg-charts/-/react-native-svg-charts-1.6.1.tgz",
  "_shasum": "7b193c96572a1dcfda1f635fe34ce5cd98a5ffae",
  "_shrinkwrap": null,
  "_spec": "react-native-svg-charts",
  "_where": "D:\\facultate\\FUCKINGREACT\\Mobile-Application-Recreation\\PowerProject",
  "author": {
    "name": "Jesper Lekland",
    "email": "jesper.lekland@push2prod.se"
  },
  "bugs": {
    "url": "https://github.com/JesperLekland/react-native-svg-charts/issues"
  },
  "dependencies": {
    "d3-array": "^1.2.0",
    "d3-interpolate-path": "2.0.0",
    "d3-scale": "^1.0.6",
    "d3-shape": "^1.0.6",
    "date-fns": "^1.28.5",
    "prop-types": "^15.6.0"
  },
  "description": "Customizable charts (Line, Bar, Area, Pie, Circle, Waterfall, Progress) for React Native",
  "devDependencies": {
    "@storybook/addon-actions": "^3.2.14",
    "@storybook/addon-knobs": "^3.2.14",
    "@storybook/addon-links": "^3.2.14",
    "@storybook/react-native": "^3.2.14",
    "babel-eslint": "^7.2.3",
    "babel-jest": "20.0.1",
    "babel-preset-react-native": "1.9.1",
    "eslint": "^3.19.0",
    "eslint-config-standard": "^10.2.1",
    "eslint-plugin-import": "^2.6.0",
    "eslint-plugin-node": "^5.1.0",
    "eslint-plugin-promise": "^3.5.0",
    "eslint-plugin-react": "^7.1.0",
    "eslint-plugin-react-native": "^2.3.2",
    "eslint-plugin-standard": "^3.0.1",
    "jest": "20.0.1",
    "react": "16.0.0-alpha.12",
    "react-dom": ">=16.0.0-alpha.12",
    "react-native": "0.46.0",
    "react-native-svg": "^5.4.1",
    "react-test-renderer": "16.0.0-alpha.6"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-p+s29hnTkWOpmNk/nhCSlD5GlEyvt5fUbY1WeANZ3rzE5TLNfvB78jaau0ZFGFDdoC/keMFfDJpkdKKVfJrByg==",
    "shasum": "7b193c96572a1dcfda1f635fe34ce5cd98a5ffae",
    "tarball": "https://registry.npmjs.org/react-native-svg-charts/-/react-native-svg-charts-1.6.1.tgz"
  },
  "gitHead": "a5803421cb3e340c6ce1557f57315be4fa3623af",
  "homepage": "https://github.com/JesperLekland/react-native-svg-charts",
  "jest": {
    "preset": "react-native"
  },
  "keywords": [
    "react-native",
    "react-component",
    "react-native-component",
    "react",
    "mobile",
    "ios",
    "android",
    "vector",
    "charts",
    "chart",
    "d3"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "lekland",
      "email": "jesper.lekland@gmail.com"
    }
  ],
  "name": "react-native-svg-charts",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">=16.0.0-alpha.12",
    "react-native": ">=0.46.0",
    "react-native-svg": "^5.4.1"
  },
  "private": false,
  "readme": "# react-native-svg-charts\n\n[![version](https://img.shields.io/npm/v/react-native-svg-charts.svg)](https://www.npmjs.com/package/react-native-svg-charts)\n[![downloads](https://img.shields.io/npm/dm/react-native-svg-charts.svg)](https://www.npmjs.com/package/react-native-svg-charts)\n![circleci](https://circleci.com/gh/JesperLekland/react-native-svg-charts.svg?style=shield&circle-token=1a809ccdfbd0df3ed425a08f09c558401f794140)\n[![license](https://img.shields.io/npm/l/react-native-svg-charts.svg)](https://www.npmjs.com/package/react-native-svg-charts)\n\n## Prerequisites\n\nThis library uses [react-native-svg](https://github.com/react-native-community/react-native-svg)\nto render its graphs. Therefore this library needs to be installed **AND** linked into your project to work.\n\nOther than the above dependency this library uses pure javascript and supports both iOS and Android\n\n## Motivation\n\nCreating beautiful graphs in React Native shouldn't be hard or require a ton of knowledge.\nWe use [react-native-svg](https://github.com/react-native-community/react-native-svg) in order to render our SVG's and to provide you with great extensibility.\nWe utilize the very popular [d3](https://d3js.org/) library to create our SVG paths and to calculate the coordinates.\n\nWe built this library to be as extensible as possible while still providing you with the most common charts and data visualization tools out of the box.\nThe Line-, Bar-, Area- and Waterfall -charts can all be extended with \"decorators\" and \"extras\".\nThe `renderDecorator` prop is called on each passed `dataPoint` and allows you to simply add things such as points or other decorators to your charts.\nThe `extras` and `renderExtra` prop is used to further decorate your charts with e.g intersections and projections, see the examples for more info.\n\nFeedback and PR's are more than welcome ðŸ™‚\n\n## Running\n\nIf you want to test out the library you can clone this repository and run it.\nWe suggest that you test out the [storybooks](https://github.com/storybooks/storybook) that we've implemented.\nMost of the charts are implemented with [knobs](https://github.com/storybooks/storybook/tree/master/addons/knobs) so that you can tweak most properties and see their behavior live.\n\nClone the repo and run the following:\n\n```bash\nyarn\n\n# for iOS\n(cd ios && pod install)\nreact-native run-ios\n\n# for Android\nreact-native run-android\n\nyarn storybook\n\n# and then reload your device\n```\n\n\n\n\n## Common Props\n\n| Property | Default | Description |\n| --- | --- | --- |\n| dataPoints | **required** | An array of integers - the data you want plotted, e.g \\[1,2,3,4]. This prop is different for [PieChart](#piechart) and [BarChart](#barchart) |\n| strokeColor | 'black' | color of the stroke|\n| strokeWidth | 1 | width of the stroke |\n| fillColor | 'none' | color of the fill |\n| dashArray | \\[ 5, 5 ] | see [this](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) but pass in as array  |\n| renderGradient | `() => {}` | function that renders the gradient. [Example](#gradient) |\n| animate | true | PropTypes.bool |\n| animationDuration | 300 | PropTypes.number |\n| style | undefined | Supports all [ViewStyleProps](https://facebook.github.io/react-native/docs/viewstyleproptypes.html) |\n| curve | d3.curveCardinal | A function like [this](https://github.com/d3/d3-shape#curves) |\n| contentInset | { top: 0, left: 0, right: 0, bottom: 0 } | An object that specifies how much fake \"margin\" to use inside of the SVG canvas. This is particularly helpful on Android where `overflow: \"visible\"` isn't supported and might cause clipping. Note: important to have same contentInset on axis's and chart |\n| numberOfTicks | 10 | We use [d3-array](https://github.com/d3/d3-array#ticks) to evenly distribute the grid and dataPoints on the yAxis. This prop specifies how many \"ticks\" we should try to render. Note: important that this prop is the same on both the chart and on the yAxis |\n| showGrid | true | Whether or not to show the grid lines |\n| gridMin | undefined | Normally the graph tries to draw from edge to edge within the view bounds. Using this prop will allow the grid to reach further than the actual dataPoints. [Example](#gridmin/max) |\n| gridMax | undefined | The same as \"gridMin\" but will instead increase the grids maximum value |\n| gridProps | `{}` | An object of props that are passed to the [Line](https://github.com/react-native-community/react-native-svg#line) component that renders the grid |\n| extras | undefined | An array of whatever data you want to render. Each item in the array will call `renderExtra`. [See example](#extras) |\n| renderExtra | `() => {}` | Similar to the `renderItem` of a *FlatList*. This function will be called for each item in the `extras` array and pass an object as an argument. The argument object is of the shape `{x: function, y: function, item: item of extras}`. [See example](#extras) |\n| renderDecorator | `() => {}`| Called once for each entry in `dataPoints` and expects a component. Use this prop to render e.g points (circles) on each data point. [See example](#decorator) |\n\n## Components\n\nThis library currently provides the following components\n* [Area](#areachart)\n* [StackedAreaChart](#stackedareachart)\n* [Bar](#barchart)\n* [StackedBarChart](#stackedbarchart)\n* [Line](#linechart)\n* [Pie](#piechart)\n* [Progress- Circle / Gauge](#progresschart)\n* [Waterfall](#waterfallchart)\n* [YAxis](#yaxis)\n* [XAxis](#xaxis)\n\nAlso see [other examples](#other-examples)\n* [Gradient](#gradient)\n* [Decorator](#decorator)\n* [Extras](#extras)\n* [GridMin/Max](#gridminmax)\n* [Layered Charts](#layered-charts)\n* [PieChart with labels](#piechart-with-labels)\n\n### AreaChart\n\n![Area chart](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/area-chart.png)\n\n#### Example\n\n```javascript\nimport React from 'react'\nimport { AreaChart } from 'react-native-svg-charts'\nimport * as shape from 'd3-shape'\n\nclass AreaChartExample extends React.PureComponent {\n\n    render() {\n\n            const data = [ 50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80 ]\n\n            return (\n                <AreaChart\n                    style={ { height: 200 } }\n                    dataPoints={ data }\n                    fillColor={ 'rgba(134, 65, 244, 0.2)' }\n                    strokeColor={ 'rgb(134, 65, 244)' }\n                    contentInset={ { top: 30, bottom: 30 } }\n                    curve={shape.curveNatural}\n                />\n            )\n        }\n\n}\n```\n\n#### Props\n\nSee [Common Props](#common-props)\n\n### StackedAreaChart\n\nVery similar to an area chart but with multiple sets of data stacked together. Notice that the `dataPoints` prop has changed to `data` and have a different signature.\nWe suggest that you read up on [d3 stacks](https://github.com/d3/d3-shape#stacks) in order to better understand this chart and its props\nSee [Area stack chart with Y axis](#area-stack-chart-with-yaxis) to see how to use a YAxis with this component\n\n![Stacked area chart](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/area-stack.png)\n\n#### Example\n\n```javascript\nimport React from 'react'\nimport { StackedAreaChart } from 'react-native-svg-charts'\nimport * as shape from 'd3-shape'\n\nclass StackedAreaExample extends React.PureComponent {\n\n    render() {\n\n        const data = [\n            {\n                month: new Date(2015, 0, 1),\n                apples: 3840,\n                bananas: 1920,\n                cherries: 960,\n                dates: 400,\n            },\n            {\n                month: new Date(2015, 1, 1),\n                apples: 1600,\n                bananas: 1440,\n                cherries: 960,\n                dates: 400,\n            },\n            {\n                month: new Date(2015, 2, 1),\n                apples: 640,\n                bananas: 960,\n                cherries: 3640,\n                dates: 400,\n            },\n            {\n                month: new Date(2015, 3, 1),\n                apples: 3320,\n                bananas: 480,\n                cherries: 640,\n                dates: 400,\n            },\n        ]\n\n        const colors = [ '#8800cc', '#aa00ff', '#cc66ff', '#eeccff' ]\n        const keys   = [ 'apples', 'bananas', 'cherries', 'dates' ]\n\n        return (\n            <AreaStackChart\n                style={ { height: 200, paddingVertical: 16 } }\n                data={ data }\n                keys={ keys }\n                colors={ colors }\n                curve={ shape.curveNatural }\n                showGrid={ false }\n            />\n        )\n    }\n}\n\nexport default StackedAreaExample\n\n```\n\n#### Props\n\n| Property | Default | Description |\n| --- | --- | --- |\n| data | **required** | An array of the data entries  |\n| keys | **required** | This array should contain the object keys of interest (see above example)\n| colors | **required** | An array of equal size as `keys` with the color for each key |\n| order | [d3.stackOrderNone](https://github.com/d3/d3-shape#stackOrderNone) | The order in which to sort the areas |\n| offset | [d3.stackOffsetNone](https://github.com/d3/d3-shape#stackOffsetNone) | A function to determine the offset of the areas |\n\nAlso see [Common Props](#common-props)\n\n### BarChart\n![Bar chart](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/bar-chart.png)\n\n#### Example (single set data)\n```javascript\nimport React from 'react'\nimport { BarChart } from 'react-native-svg-charts'\n\nclass BarChartExample extends React.PureComponent {\n\n    render() {\n\n        const data    = [ 50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80 ]\n        const barData = [\n            {\n                values: data,\n                fillColor: 'rgb(134, 65, 244)',\n                fillColorNegative: 'rgba(134, 65, 244, 0.2)',\n            },\n        ]\n\n        return (\n            <BarChart\n                style={ { height: 200 } }\n                data={ barData }\n                contentInset={ { top: 30, bottom: 30 } }\n            />\n        )\n    }\n\n}\n\n```\n\n![Grouped bar chart](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/grouped-bar-chart.png)\n\n#### Example (multiple set data - grouped)\n```javascript\nimport React from 'react'\nimport { BarChart } from 'react-native-svg'\n\nclass GroupedBarChartExample extends React.PureComponent {\n\n    render() {\n\n        const data1 = [ 14, -1, 100, -95, -94, -24, -8, 85, -91, 35, -53, 53, -78, 66, 96, 33, -26, -32, 73, 8 ]\n        const data2 = [ 24, 28, 93, 77, -42, -62, 52, -87, 21, 53, -78, -62, -72, -6, 89, -70, -94, 10, 86, 84 ]\n\n        const barData = [\n            {\n                values: data1,\n                fillColor: 'rgb(134, 65, 244)',\n                fillColorNegative: 'rgba(134, 65, 244, 0.2)',\n            },\n            {\n                values: data2,\n                fillColor: 'rgb(244, 115, 65)',\n                fillColorNegative: 'rgb(244, 115, 65, 0.2)',\n            },\n        ]\n\n        return (\n            <BarChart\n                style={ { height: 200 } }\n                data={ barData }\n                contentInset={ { top: 30, bottom: 30 } }\n            />\n        )\n    }\n\n}\n\n```\n\n### Props\nAlso see [Common Props](#common-props)\n\n| Property | Default | Description |\n| --- | --- | --- |\n| data | **required** | Slightly different than other charts since we allow for grouping of bars. This array should contain at least one object with the following shape `{fillColor: 'string', fillColorNegative: 'string', strokeColorPositive: 'string', strokeColorNegative: '', values: []}` |\n| spacing | 0.05 | Spacing between the bars (or groups of bars). Percentage of one bars width. Default = 5% of bar width |\n| contentInset | `{ top: 0, left: 0, right: 0, bottom: 0 }` | PropTypes.shape |\n\n### StackedBarChart\n\nThe same as the [StackedAreaChart](#stackedareachart) except with bars.\nWe suggest that you read up on [d3 stacks](https://github.com/d3/d3-shape#stacks) in order to better understand this chart and its props\n\n![Stacked bar chart](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/bar-stack.png)\n\n#### Example\n\n```javascript\nimport React from 'react'\nimport { StackedBarChart } from 'react-native-svg-charts'\n\nclass StackedBarChartExample extends React.PureComponent {\n\n    render() {\n\n        const data = [\n            {\n                month: new Date(2015, 0, 1),\n                apples: 3840,\n                bananas: 1920,\n                cherries: 960,\n                dates: 400,\n                oranges: 400,\n            },\n            {\n                month: new Date(2015, 1, 1),\n                apples: 1600,\n                bananas: 1440,\n                cherries: 960,\n                dates: 400,\n            },\n            {\n                month: new Date(2015, 2, 1),\n                apples: 640,\n                bananas: 960,\n                cherries: 3640,\n                dates: 400,\n            },\n            {\n                month: new Date(2015, 3, 1),\n                apples: 3320,\n                bananas: 480,\n                cherries: 640,\n                dates: 400,\n            },\n        ]\n\n        const colors = [ '#7b4173', '#a55194', '#ce6dbd', '#de9ed6' ]\n        const keys   = [ 'apples', 'bananas', 'cherries', 'dates' ]\n\n        return (\n            <StackedBarChart\n                style={ { height: 200 } }\n                keys={ keys }\n                colors={ colors }\n                data={ data }\n                showGrid={ false }\n                contentInset={ { top: 30, bottom: 30 } }\n            />\n        )\n    }\n\n}\n\nexport default StackedBarChartExample\n\n\n```\n\n#### Props\n\n| Property | Default | Description |\n| --- | --- | --- |\n| data | **required** | An array of the data entries  |\n| keys | **required** | This array should contain the object keys of interest (see above example)\n| colors | **required** | An array of equal size as `keys` with the color for each key |\n| order | [d3.stackOrderNone](https://github.com/d3/d3-shape#stackOrderNone) | The order in which to sort the areas |\n| offset | [d3.stackOffsetNone](https://github.com/d3/d3-shape#stackOffsetNone) | A function to determine the offset of the areas |\n\nAlso see [Common Props](#common-props)\n\n### LineChart\n![Line chart](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/line-chart.png)\n\n#### Example\n\n```javascript\nimport React from 'react'\nimport { LineChart } from 'react-native-svg-charts'\nimport * as shape from 'd3-shape'\n\nclass LineChartExample extends React.PureComponent {\n\n    render() {\n\n        const data = [ 50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80 ]\n\n        return (\n            <LineChart\n                style={ { height: 200 } }\n                dataPoints={ data }\n                fillColor={ 'purple' }\n                strokeColor={ 'rgb(134, 65, 244)' }\n                shadowColor={ 'rgba(134, 65, 244, 0.2)' }\n                contentInset={ { top: 20, bottom: 20 } }\n                curve={shape.curveLinear}\n            />\n        )\n    }\n\n}\n\n```\n\n#### Props\nSee [Common Props](#common-props)\n\n\n### PieChart\n![Pie chart](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/pie-chart.png)\n\n#### Example\n```javascript\nimport React from 'react'\nimport { PieChart } from 'react-native-svg-charts'\n\nclass PieChartExample extends React.PureComponent {\n\n    render() {\n\n        const data = [ 50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80 ]\n\n        const randomColor = () => ('#' + (Math.random() * 0xFFFFFF << 0).toString(16) + '000000').slice(0, 7)\n\n        const pieData = data\n            .filter(value => value > 0)\n            .map((value, index) => ({\n                value,\n                color: randomColor(),\n                key: `pie-${index}`,\n            }))\n\n        return (\n            <PieChart\n                style={ { height: 200 } }\n                dataPoints={ pieData }\n            />\n        )\n    }\n\n}\n```\n\n#### Props\n\n| Property | Default | Description |\n| --- | --- | --- |\n| data | **required** | Slightly different than `dataPoints` because we allow for custom coloring of slices. The array should contain objects of the following shape: `{key: 'string|number', color: 'string', value: 'number'}` |\n| outerRadius | \"100%\" | The outer radius, use this to tweak how close your pie is to the edge of it's container. Takes either percentages or absolute numbers (pixels) |\n| innerRadius | \"50%\" | The inner radius, use this to create a donut. Takes either percentages or absolute numbers (pixels) |\n| labelRadius | undefined | The radius of the circle that will help you layout your labels. Takes either percentages or absolute numbers (pixels) |\n| padAngle | |  The angle between the slices |\n| renderDecorator | `() => {}` | PropTypes.func |\n| sort | `(a,b) => b.value - a.value` | Like any normal sort function it expects either 0, a positive or negative return value. The arguments are each an object from the `dataPoints` array |\n\n\n### ProgressCircle\n![Progress circle](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/progress-circle.png)\n\n#### Example\n```javascript\nimport React from 'react'\nimport { ProgressCircle }  from 'react-native-svg-charts'\n\nclass ProgressCircleExample extends React.PureComponent {\n\n    render() {\n\n        return (\n            <ProgressCircle\n                style={ { height: 200 } }\n                progress={ 0.7 }\n                progressColor={'rgb(134, 65, 244)'}\n            />\n        )\n    }\n\n}\n\n```\n\n\n![Progress gauge](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/progress-gauge.png)\n\n#### Example (Gauge variant)\n```javascript\nimport React from 'react'\nimport { ProgressCircle } from 'react-native-svg-charts'\n\nclass ProgressGaugeExample extends React.PureComponent {\n\n    render() {\n\n        return (\n            <ProgressCircle\n                style={ { height: 200 } }\n                progress={ 0.7 }\n                progressColor={ 'rgb(134, 65, 244)' }\n                startAngle={ -Math.PI * 0.8 }\n                endAngle={ Math.PI * 0.8 }\n            />\n        )\n    }\n\n}\n\n```\n\n#### Props\n\n| Property | Default | Description |\n| --- | --- | --- |\n| progress | **required** | PropTypes.number.isRequired |\n| progressColor | 'black' | PropTypes.any |\n| startAngle | `0` | PropTypes.number |\n| endAngle | `Math.PI * 2` |  PropTypes.number |\n\n### WaterfallChart\n![Waterfall chart](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/waterfall-chart.png)\n\n#### Example\n```javascript\nimport React from 'react'\nimport { WaterfallChart } from 'react-native-svg-charts'\nimport * as shape from 'd3-shape'\n\nclass WaterfallChartExample extends React.PureComponent {\n\n    render() {\n\n        const data = [ 50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80 ]\n\n        return (\n            <WaterfallChart\n                style={ { height: 200 } }\n                dataPoints={ data }\n                contentInset={ { top: 20, bottom: 20 } }\n                dashArray={ [ 2, 4 ] }\n                spacing={ 0.2 }\n                curve={ shape.curveCatmullRom }\n            />\n        )\n    }\n\n}\n```\n\n#### Props\n\nSee [Common Props](#common-props)\n\n\n### YAxis\n\n![Line chart](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/y-axis.png)\n\nA helper component to layout your Y-axis labels on the same coordinates as your chart.\nIt's very important that the component has the exact same view bounds (preferably wrapped in the same parent view) as the chart it's supposed to match.\nIf the chart has property `contentInset` set it's very important that the YAxis has the same vertical contentInset.\n\n#### Example\n```javascript\nimport React from 'react'\nimport { LineChart, YAxis } from 'react-native-svg-charts'\nimport * as shape from 'd3-shape'\nimport YAxis from '../y-axis'\nimport { View } from 'react-native'\n\nclass YAxisExample extends React.PureComponent {\n\n    render() {\n\n        const data = [ 50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80 ]\n\n        const contentInset = { top: 20, bottom: 20 }\n\n        return (\n            <View style={ { height: 200, flexDirection: 'row' } }>\n                <YAxis\n                    dataPoints={ data }\n                    contentInset={ contentInset }\n                    labelStyle={ { color: 'grey' } }\n                    formatLabel={ value => `${value}ÂºC` }\n                />\n                <LineChart\n                    style={ { flex: 1, marginLeft: 16 } }\n                    dataPoints={ data }\n                    fillColor={ 'purple' }\n                    strokeColor={ 'rgb(134, 65, 244)' }\n                    shadowColor={ 'rgba(134, 65, 244, 0.2)' }\n                    contentInset={ contentInset }\n                    curve={ shape.curveLinear }\n                />\n            </View>\n        )\n    }\n\n}\n\n```\n\n#### Props\n\n(see [Common Props](#common-props))\n\n| Property | Default | Description |\n| --- | --- | --- |\n| labelStyle | undefined | Supports all [TextStyleProps](https://facebook.github.io/react-native/docs/textstyleproptypes.html) |\n| formatLabel | `value => {}` | A utility function to format the text before it is displayed, e.g `value => \"$\" + value |\n| contentInset | { top: 0, bottom: 0 } | Used to sync layout with chart (if same prop used there) |\n\n### XAxis\n\n![Line chart](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/x-axis.png)\n\nA helper component to layout your X-axis labels on the same coordinates as your chart.\nIt's very important that the component has the exact same view bounds (preferably wrapped in the same parent view) as the chart it's supposed to match.\nIf the chart has property `contentInset` set it's very important that the YAxis has the same horizontal contentInset.\nThe XAxis has a special property `chartType` that should match the type of the chart in order to layout the labels correctly\n\n#### Example\n```javascript\nimport React from 'react'\nimport { BarChart, XAxis } from 'react-native-svg-charts'\nimport { View } from 'react-native'\n\nclass XAxisExample extends React.PureComponent {\n\n    render() {\n\n        const data    = [ 14, -1, 100, -95, -94, -24, -8, 85, -91, 35, -53, 53, -78, 66, 96, 33, -26, -32, 73, 8 ]\n        const barData = [\n            {\n                values: data,\n                fillColor: 'rgb(134, 65, 244)',\n                fillColorNegative: 'rgba(134, 65, 244, 0.2)',\n            },\n        ]\n\n        return (\n            <View style={ { height: 200 } }>\n                <BarChart\n                    style={ { flex: 1 } }\n                    data={ barData }\n                />\n                <XAxis\n                    style={ { paddingVertical: 16 } }\n                    values={ data }\n                    formatLabel={ (value, index) => index }\n                    chartType={ XAxis.Type.BAR }\n                    labelStyle={ { color: 'grey' } }\n                />\n            </View>\n        )\n    }\n}\n\n```\n\n\n#### Props\n\n| Property | Default | Description |\n| --- | --- | --- |\n| values | **required** | An array of values to render on the xAxis. Should preferably have the same length as the chart's dataPoints. |\n| chartType | `XAxis.Type.LINE`| Should state what chart type it is rendered next to. Important because of slightly different calculations. One of \\[ XAxis.Type.LINE, XAxis.Type.BAR ] |\n| spacing | 0.05 | Only applicable if `chartType=XAxis.Type.BAR` and should then be equal to `spacing` prop on the actual BarChart.   |\n| labelStyle | undefined | Supports all [TextStyleProps](https://facebook.github.io/react-native/docs/textstyleproptypes.html) |\n| formatLabel | `(value, index) => index}` | A utility function to format the text before it is displayed, e.g `value => \"day\" + value |\n| contentInset | { left: 0, right: 0 } | Used to sync layout with chart (if same prop used there) |\n\n\n\n## Other Examples\n\n### Gradient\n![Gradient](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/gradient.png)\n\n```javascript\nimport React from 'react'\nimport { AreaChart } from 'react-native-svg-charts'\nimport { LinearGradient, Stop } from 'react-native-svg'\n\nclass GradientExample extends React.PureComponent {\n\n    render() {\n\n        const data = [ 50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80 ]\n\n        return (\n            <AreaChart\n                style={ { height: 200 } }\n                dataPoints={ data }\n                contentInset={ { top: 20, bottom: 20 } }\n                renderGradient={ ({ id }) => (\n                    <LinearGradient id={ id } x1={ '0%' } y={ '0%' } x2={ '0%' } y2={ '100%' }>\n                        <Stop offset={ '0%' } stopColor={ 'rgb(134, 65, 244)' } stopOpacity={ 0.8 }/>\n                        <Stop offset={ '100%' } stopColor={ 'rgb(134, 65, 244)' } stopOpacity={ 0.2 }/>\n                    </LinearGradient>\n                ) }\n            />\n        )\n    }\n\n}\n```\n\n\n### Gradient Advanced\nThis example is made to show you how flexible and powerful the renderGradient/Decorator/Extras pattern is. Your imagination sets the limits in this case\n\n![Gradient](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/gradient-advanced.png)\n\n```javascript\nimport React from 'react'\nimport { AreaChart } from 'react-native-svg-charts'\nimport { LinearGradient, Stop } from 'react-native-svg'\nimport { StyleSheet, View } from 'react-native'\n\nclass GradientAdvancedExample extends React.PureComponent {\n\n    render() {\n\n        const data = [ 50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80 ]\n\n        const cut = 0.5\n        const cutBuffer = 0.001\n\n        return (\n            <View>\n                <AreaChart\n                    style={ { height: 200 } }\n                    dataPoints={ data }\n                    contentInset={ { top: 20, bottom: 20 } }\n                    renderGradient={ ({ id }) => (\n                        <LinearGradient id={ id } x1={ '0%' } y1={ '0%' } x2={ '0%' } y2={ '100%' }>\n                            <Stop offset={ '0%' } stopColor={ 'rgb(134, 65, 244)' } stopOpacity={ 0.8 }/>\n                            <Stop offset={ '100%' } stopColor={ 'rgb(134, 65, 244)' } stopOpacity={ 0.2 }/>\n                        </LinearGradient>\n                    ) }\n                />\n                <AreaChart\n                    style={ StyleSheet.absoluteFill }\n                    dataPoints={ data }\n                    contentInset={ { top: 20, bottom: 20 } }\n                    renderGradient={ ({ id }) => (\n                        <LinearGradient id={ id } x1={ '0%' } y1={ '0%' } x2={ '100%' } y2={ '0%' }>\n                            <Stop offset={ '0' } stopColor={ 'transparent' } stopOpacity={ 0 }/>\n                            <Stop offset={ `${cut}` } stopColor={ 'transparent' } stopOpacity={ 0 }/>\n                            <Stop offset={ `${cut + cutBuffer}` } stopColor={ 'white' } stopOpacity={ 0.6 }/>\n                            <Stop offset={ '1' } stopColor={ 'white' } stopOpacity={ 0.6 }/>\n                        </LinearGradient>\n                    ) }\n                />\n            </View>\n        )\n    }\n\n}\n\nexport default GradientAdvancedExample\n\n```\n\n### Decorator\n\nThe `renderDecorator` prop allow for decorations on each of the provided data points. The `renderDecorator` is very similar to the `renderItem` of a [FlatList](https://facebook.github.io/react-native/docs/flatlist.html)\nand is a function that is called with an object as an arguments to help the layout of the extra decorator. The content of the argument object is as follows:\n\n```javascript\n{\n    value: number, // the value of the data points. Pass to y function to get y coordinate of data point\n    index: number, // the index of the data points. Pass to x function to get x coordinate of data point\n    x: function, // the function used to calculate the x coordinate of a specific data point index\n    y: function, // the function used to calculate the y coordinate of a specific data point value\n}\n```\n\nRemember that all components returned by `renderDecorator` must be one that is renderable by the [`<Svg/>`](https://github.com/react-native-community/react-native-svg#svg) element, i.e all components supported by [react-native-svg](https://github.com/react-native-community/react-native-svg)\n\n![Decorator](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/decorators.png)\n\n```javascript\nimport React from 'react'\nimport { AreaChart } from 'react-native-svg-charts'\nimport { Circle } from 'react-native-svg'\n\nclass DecoratorExample extends React.PureComponent {\n\n    render() {\n\n        const data = [ 50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80 ]\n\n        return (\n            <AreaChart\n                style={ { height: 200 } }\n                dataPoints={ data }\n                fillColor={ 'rgba(134, 65, 244, 0.2)' }\n                strokeColor={ 'rgb(134, 65, 244)' }\n                contentInset={ { top: 20, bottom: 30 } }\n                renderDecorator={ ({ x, y, index, value }) => (\n                    <Circle\n                        key={ index }\n                        cx={ x(index) }\n                        cy={ y(value) }\n                        r={ 4 }\n                        stroke={ 'rgb(134, 65, 244)' }\n                        fill={ 'white' }\n                    />\n                ) }\n            />\n        )\n    }\n\n}\n```\n### Extras\nThe `extras` prop allow for arbitrary decorators on your chart. The prop takes an array of arbitrary data and then calls `renderExtra` for each entry in that array.\nThe `renderExtra` is very similar to the `renderItem` of a [FlatList](https://facebook.github.io/react-native/docs/flatlist.html)\nand is a function that is called with an object as an arguments to help the layout of the extra decorator. The content of the argument object is as follows:\n\n```javascript\n{\n    item: any, // the entry of the 'extras' array\n    x: function, // the function used to calculate the x coordinate of a specific data point index\n    y: function, // the function used to calculate the y coordinate of a specific data point value\n    index: number, // the index of the item in the 'extras' array\n}\n```\n\nRemember that all components returned by `renderExtra` must be one that is renderable by the [`<Svg/>`](https://github.com/react-native-community/react-native-svg#svg) element, i.e all components supported by [react-native-svg](https://github.com/react-native-community/react-native-svg)\n\n![Extras](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/extras.png)\n\n#### Example\n\n```javascript\nimport React from 'react'\nimport { LineChart } from 'react-native-svg-charts'\nimport { Circle } from 'react-native-svg'\nimport * as shape from 'd3-shape'\nimport { Circle, G, Line, Rect, Text } from 'react-native-svg'\n\nclass ExtrasExample extends React.PureComponent {\n\n    render() {\n\n        const data = [ 50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80 ]\n\n        /**\n         * Both below functions should preferably be their own React Components\n         */\n\n        const HorizontalLine = (({ y }) => (\n            <Line\n                key={ 'zero-axis' }\n                x1={ '0%' }\n                x2={ '100%' }\n                y1={ y(50) }\n                y2={ y(50) }\n                stroke={ 'grey' }\n                strokeDasharray={ [ 4, 8 ] }\n                strokeWidth={ 2 }\n            />\n        ))\n\n        const Tooltip = ({ x, y }) => (\n            <G\n                x={ x(5) - (75 / 2) }\n                key={ 'tooltip' }\n                onPress={ () => console.log('tooltip clicked') }\n            >\n                <G y={ 50 }>\n                    <Rect\n                        height={ 40 }\n                        width={ 75 }\n                        stroke={ 'grey' }\n                        fill={ 'white' }\n                        ry={ 10 }\n                        rx={ 10 }\n                    />\n                    <Text\n                        x={ 75 / 2 }\n                        textAnchor={ 'middle' }\n                        y={ 10 }\n                        stroke={ 'rgb(134, 65, 244)' }\n                    >\n                        { `${data[5]}ÂºC` }\n                    </Text>\n                </G>\n                <G x={ 75 / 2 }>\n                    <Line\n                        y1={ 50 + 40 }\n                        y2={ y(data[ 5 ]) }\n                        stroke={ 'grey' }\n                        strokeWidth={ 2 }\n                    />\n                    <Circle\n                        cy={ y(data[ 5 ]) }\n                        r={ 6 }\n                        stroke={ 'rgb(134, 65, 244)' }\n                        strokeWidth={2}\n                        fill={ 'white' }\n                    />\n                </G>\n            </G>\n        )\n\n        return (\n            <LineChart\n                style={ { height: 200 } }\n                dataPoints={ data }\n                fillColor={ 'purple' }\n                strokeColor={ 'rgb(134, 65, 244)' }\n                shadowColor={ 'rgba(134, 65, 244, 0.2)' }\n                contentInset={ { top: 20, bottom: 20 } }\n                curve={ shape.curveLinear }\n                extras={ [ HorizontalLine, Tooltip ] }\n                renderExtra={ ({ item, ...args }) => item(args) }\n            />\n        )\n    }\n\n}\n```\n\n### gridMin/Max\nCharts normally render edge to edge, if this is not the wanted behaviour it can easily be altered with the `gridMin` and `gridMax` props. Just compare the below example with the example for the regular [AreaChart](#areachart)\n\n![Grid Min Max](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/grid-min-max.png)\n\n#### Example\n```javascript\nimport React from 'react'\nimport { AreaChart } from 'react-native-svg-charts'\nimport * as shape from 'd3-shape'\n\nclass GridMinMaxExample extends React.PureComponent {\n\n    render() {\n\n        const data = [ 50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80 ]\n\n        return (\n            <AreaChart\n                style={ { height: 200 } }\n                dataPoints={ data }\n                fillColor={ 'rgba(134, 65, 244, 0.2)' }\n                strokeColor={ 'rgb(134, 65, 244)' }\n                contentInset={ { top: 30, bottom: 30 } }\n                curve={shape.curveNatural}\n                gridMax={500}\n                gridMin={-500}\n            />\n        )\n    }\n}\n```\n\n### StackedAreaChart with YAxis\nSince the `<StackedAreaChart>` uses a different data structure and can be affected by both the `order` and `offset` prop it's not obvious how to extra the dataPoints for the YAxis.\nThe remedy this the AreaStackChart exposes a static API with a function `extractDataPoints` where you must pass in the same `data`,  `keys` ( as well as  `order` and `offset` if other than default is used) as the props to the component itself\n\n![Area stack chart with YAxis](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/area-stack-with-y-axis.png)\n\n```javascript\nimport React from 'react'\nimport { AreaStackChart, YAxis } from 'react-native-svg-charts'\nimport * as shape from 'd3-shape'\nimport { View } from 'react-native'\n\nclass AreaStackWithAxisExample extends React.PureComponent {\n\n    render() {\n\n        const data = [\n            {\n                month: new Date(2015, 0, 1),\n                apples: 3840,\n                bananas: 1920,\n                cherries: 960,\n                dates: 400,\n            },\n            {\n                month: new Date(2015, 1, 1),\n                apples: 1600,\n                bananas: 1440,\n                cherries: 960,\n                dates: 400,\n            },\n            {\n                month: new Date(2015, 2, 1),\n                apples: 640,\n                bananas: 960,\n                cherries: 3640,\n                dates: 400,\n            },\n            {\n                month: new Date(2015, 3, 1),\n                apples: 3320,\n                bananas: 480,\n                cherries: 640,\n                dates: 400,\n            },\n        ]\n\n        const colors = [ 'rgb(138, 0, 230, 0.8)', 'rgb(173, 51, 255, 0.8)', 'rgb(194, 102, 255, 0.8)', 'rgb(214, 153, 255, 0.8)' ]\n        const keys   = [ 'apples', 'bananas', 'cherries', 'dates' ]\n\n        return (\n            <View style={ { flexDirection: 'row', height: 200 } }>\n                <AreaStackChart\n                    style={ { flex: 1 } }\n                    contentInset={ { top: 10, bottom: 10 } }\n                    data={ data }\n                    keys={ keys }\n                    colors={ colors }\n                    curve={ shape.curveNatural }\n                />\n                <YAxis\n                    style={ { position: 'absolute', top: 0, bottom: 0, transform: [ { translateY: -5 } ] } }\n                    dataPoints={ AreaStackChart.extractDataPoints(data, keys) }\n                    contentInset={ { top: 10, bottom: 10 } }\n                    labelStyle={ {\n                        fontSize: 8,\n                        color: 'white',\n                        textShadowOffset: { width: 1, height: 1 },\n                        textShadowColor: 'rgba(0,0,0,0.3)',\n                    } }\n                />\n            </View>\n        )\n    }\n}\n\nexport default AreaStackWithAxisExample\n\n```\n\n### Layered Charts\nThis library supports layering/composing out of the box with simple styling. As long as the layered charts share the same container and are correctly positioned everything will work as expected.\nIf your data sets don't share the same max/min data make sure to utilize the `gridMin/gridMax` prop to align the charts.\n\n![Stacked Charts](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/stacked-charts.png)\n\n#### Example\n```javascript\nimport React from 'react'\nimport { AreaChartÂ } from 'react-native-svg-charts'\nimport * as shape from 'd3-shape'\nimport { StyleSheet, View } from 'react-native'\n\nclass StackedChartsExample extends React.PureComponent {\n\n    render() {\n\n            const data  = [ 50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80 ]\n            const data2 = [ 50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80 ].reverse()\n\n            return (\n                <View style={ { height: 200 } }>\n                    <AreaChart\n                        style={ { flex: 1 } }\n                        dataPoints={ data }\n                        fillColor={ 'rgba(134, 65, 244, 0.5)' }\n                        strokeColor={ 'rgb(134, 65, 244)' }\n                        contentInset={ { top: 20, bottom: 20 } }\n                        curve={ shape.curveNatural }\n                    />\n                    <AreaChart\n                        style={ StyleSheet.absoluteFill }\n                        dataPoints={ data2 }\n                        fillColor={ 'rgba(34, 128, 176, 0.5)' }\n                        strokeColor={ 'rgb(34, 128, 176)' }\n                        contentInset={ { top: 20, bottom: 20 } }\n                        curve={ shape.curveNatural }\n                    />\n                </View>\n            )\n        }\n\n}\n```\n\n### PieChart with labels\nThe PieChart as well as most of the charts support decorators.\nIn the case of the PieChart you get `pieCentroid` and `labelCentroid` instead of the `x` and `y` as arguments in the `renderDecorator` callback.\nThis will allow you to render labels aligned with your pie slices. Experiment with `outerRadius` and `labelRadius` to layout your labels in relation to your chart\n\n![PieChart with labels](https://raw.githubusercontent.com/jesperlekland/react-native-svg-charts/master/screenshots/pie-chart-with-labels.png)\n\n### Example\n```javascript\nimport React from 'react'\nimport PieChart from 'react-native-svg-charts'\nimport { Circle, G, Line } from 'react-native-svg'\n\nclass PieChartWithLabelExample extends React.PureComponent {\n\n    render() {\n\n        const data = [ 50, 10, 40, 95, -4, -24, 85, 91 ]\n\n        const randomColor = () => ('#' + (Math.random() * 0xFFFFFF << 0).toString(16) + '000000').slice(0, 7)\n\n        const pieData = data\n            .filter(value => value > 0)\n            .map((value, index) => ({\n                value,\n                color: randomColor(),\n                key: `pie-${index}`,\n            }))\n\n        return (\n            <PieChart\n                style={ { height: 200 } }\n                dataPoints={ pieData }\n                innerRadius={ 20 }\n                outerRadius={ 55 }\n                labelRadius={ 80 }\n                renderDecorator={ ({ item, pieCentroid, labelCentroid, index }) => (\n                    <G key={ index }>\n                        <Line\n                            x1={ labelCentroid[ 0 ] }\n                            y1={ labelCentroid[ 1 ] }\n                            x2={ pieCentroid[ 0 ] }\n                            y2={ pieCentroid[ 1 ] }\n                            stroke={ item.color }\n                        />\n                        <Circle\n                            cx={ labelCentroid[ 0 ] }\n                            cy={ labelCentroid[ 1 ] }\n                            r={ 15 }\n                            fill={ item.color }\n                        />\n                    </G>\n                ) }\n\n            />\n        )\n    }\n\n}\n```\n\n## License\n[MIT](./LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/JesperLekland/react-native-svg-charts.git"
  },
  "scripts": {
    "eslint": "eslint .",
    "start": "node node_modules/react-native/local-cli/cli.js start",
    "storybook": "storybook start -p 7008",
    "test": "jest"
  },
  "version": "1.6.1"
}
