{
  "_args": [
    [
      {
        "raw": "d3-interpolate-path@2.0.0",
        "scope": null,
        "escapedName": "d3-interpolate-path",
        "name": "d3-interpolate-path",
        "rawSpec": "2.0.0",
        "spec": "2.0.0",
        "type": "version"
      },
      "D:\\facultate\\FUCKINGREACT\\Mobile-Application-Recreation\\PowerProject\\node_modules\\react-native-svg-charts"
    ]
  ],
  "_from": "d3-interpolate-path@2.0.0",
  "_id": "d3-interpolate-path@2.0.0",
  "_inCache": true,
  "_location": "/d3-interpolate-path",
  "_nodeVersion": "7.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/d3-interpolate-path-2.0.0.tgz_1499267812461_0.9916079363320023"
  },
  "_npmUser": {
    "name": "pbeshai",
    "email": "peter.beshai@gmail.com"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "d3-interpolate-path@2.0.0",
    "scope": null,
    "escapedName": "d3-interpolate-path",
    "name": "d3-interpolate-path",
    "rawSpec": "2.0.0",
    "spec": "2.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "/react-native-svg-charts"
  ],
  "_resolved": "https://registry.npmjs.org/d3-interpolate-path/-/d3-interpolate-path-2.0.0.tgz",
  "_shasum": "cb0327314fedb14e6ea1789ab7e095a16c2f8ab2",
  "_shrinkwrap": null,
  "_spec": "d3-interpolate-path@2.0.0",
  "_where": "D:\\facultate\\FUCKINGREACT\\Mobile-Application-Recreation\\PowerProject\\node_modules\\react-native-svg-charts",
  "author": {
    "name": "Peter Beshai",
    "email": "peter.beshai@gmail.com",
    "url": "http://github.com/pbeshai"
  },
  "bugs": {
    "url": "https://github.com/pbeshai/d3-interpolate-path/issues"
  },
  "dependencies": {
    "d3-interpolate": "^1.1.1"
  },
  "description": "Interpolates path `d` attribute smoothly when A and B have different number of points.",
  "devDependencies": {
    "babel-eslint": "^6.1.2",
    "babel-plugin-transform-object-assign": "^6.22.0",
    "babel-preset-es2015-rollup": "^1.2.0",
    "eslint": "^3.3.1",
    "eslint-config-airbnb-base": "^5.0.2",
    "eslint-plugin-import": "^1.13.0",
    "faucet": "0.0.1",
    "rollup": "^0.34.10",
    "rollup-plugin-babel": "^2.6.1",
    "rollup-watch": "^2.5.0",
    "tape": "4",
    "uglify-js": "2"
  },
  "directories": {},
  "dist": {
    "shasum": "cb0327314fedb14e6ea1789ab7e095a16c2f8ab2",
    "tarball": "https://registry.npmjs.org/d3-interpolate-path/-/d3-interpolate-path-2.0.0.tgz"
  },
  "gitHead": "f3d5880188d0a72808311bb3718e55e05e0800e1",
  "homepage": "https://github.com/pbeshai/d3-interpolate-path",
  "jsnext:main": "index",
  "keywords": [
    "d3",
    "d3-module",
    "d3-interpolate",
    "d3-interpolate-path"
  ],
  "license": "BSD-3-Clause",
  "main": "build/d3-interpolate-path.js",
  "maintainers": [
    {
      "name": "pbeshai",
      "email": "peter.beshai@gmail.com"
    }
  ],
  "name": "d3-interpolate-path",
  "optionalDependencies": {},
  "readme": "# d3-interpolate-path\n\n[![npm version](https://badge.fury.io/js/d3-interpolate-path.svg)](https://badge.fury.io/js/d3-interpolate-path)\n\nd3-interpolate-path is a D3 plugin that adds an [interpolator](https://github.com/d3/d3-interpolate)\noptimized for SVG &lt;path&gt; elements.\n\nBlog: [Improving D3 Path Animation](https://bocoup.com/weblog/improving-d3-path-animation)\n\nDemo: http://peterbeshai.com/d3-interpolate-path/\n\n![d3-interpolate-path demo](http://peterbeshai.com/vis/d3-interpolate-path/d3-interpolate-path-demo.gif)\n\n## Example Usage\n\n```js\nvar line = d3.line()\n  .curve(d3.curveLinear)\n  .x(function (d) { return x(d.x); })\n  .y(function (d) { return y(d.y); });\n\nd3.select('path.my-path')\n  .transition()\n  .duration(2000)\n  .attrTween('d', function (d) {\n    var previous = d3.select(this).attr('d');\n    var current = line(d);\n    return d3.interpolatePath(previous, current);\n  });\n```\n\n\n## Development\n\nGet rollup watching for changes and rebuilding\n\n```bash\nnpm run watch\n```\n\nRun a web server in the docs directory\n\n```bash\ncd docs\nphp -S localhost:8000\n```\n\nGo to http://localhost:8000\n\n\n## Installing\n\nIf you use NPM, `npm install d3-interpolate-path`. Otherwise, download the [latest release](https://github.com/pbeshai/d3-interpolate-path/releases/latest).\n\n## API Reference\n\n\n<a href=\"#interpolatePath\" name=\"interpolatePath\">#</a> <b>interpolatePath</b>(*a*, *b*, *excludeSegment*)\n\nReturns an interpolator between two path attribute `d` strings *a* and *b*. The interpolator extends *a* and *b* to have the same number of points before using [d3.interpolateString](https://github.com/d3/d3-interpolate#interpolateString) on them.\n\n```js\nvar pathInterpolator = interpolatePath('M0,0 L10,10', 'M10,10 L20,20 L30,30')\npathInterpolator(0)   // 'M0,0 L10,10 L10,10'\npathInterpolator(0.5) // 'M5,5 L15,15 L20,20'\npathInterpolator(1)   // 'M10,10 L20,20 L30,30'\n```\n\nYou can optionally provide a function *excludeSegment* that takes two adjacent path commands and returns true if that segment should be excluded when splitting the line. A command object has form `{ type, x, y }` (with possibly more attributes depending on type). An example object:\n\n```js\n// equivalent to M0,150 in a path `d` string\n{\n  type: 'M',\n  x: 0,\n  y: 150\n}\n```\n\nThis is most useful when working with d3-area. Excluding the final segment (i.e. the vertical line at the end) from being split ensures a nice transition. If you know that highest `x` value in the path, you can exclude the final segment by passing an excludeSegment function similar to:\n\n```js\nfunction excludeSegment(a, b) {\n  return a.x === b.x && a.x === 300; // here 300 is the max X\n}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pbeshai/d3-interpolate-path.git"
  },
  "scripts": {
    "build": "rm -rf build && mkdir build && rollup --config rollup.config.js",
    "lint": "eslint -c .eslintrc.js src",
    "postpublish": "zip -j build/d3-interpolate-path.zip -- LICENSE README.md build/d3-interpolate-path.js build/d3-interpolate-path.min.js",
    "prepublish": "npm run lint && npm run test && uglifyjs build/d3-interpolate-path.js -c -m -o build/d3-interpolate-path.min.js",
    "pretest": "npm run build",
    "test": "tape 'test/**/*-test.js' | faucet",
    "test:raw": "tape 'test/**/*-test.js'",
    "watch": "rollup --config rollup.config.js --watch"
  },
  "version": "2.0.0"
}
